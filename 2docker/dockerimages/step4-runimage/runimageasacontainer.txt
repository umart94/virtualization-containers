Run your image as a container
Run the following command to start a container based on your new image:

docker run --publish 8000:8080 --detach --name bb bulletinboard:1.0
There are a couple of common flags here:

--publish asks Docker to forward traffic incoming on the host’s port 8000 to the container’s port 8080. Containers have their own private set of ports, so if you want to reach one from the network, you have to forward traffic to it in this way. Otherwise, firewall rules will prevent all network traffic from reaching your container, as a default security posture.
--detach asks Docker to run this container in the background.
--name specifies a name with which you can refer to your container in subsequent commands, in this case bb.
Visit your application in a browser at localhost:8000. You should see your bulletin board application up and running. At this step, you would normally do everything you could to ensure your container works the way you expected; now would be the time to run unit tests, for example.

Once you’re satisfied that your bulletin board container works correctly, you can delete it:

docker rm --force bb
The --force option stops a running container, so it can be removed. If you stop the container running with docker stop bb first, then you do not need to use --force to remove it.


















> vue-event-bulletin@1.0.0 start

> node server.js


Magic happens on port 8080...

GET / 200 5.690 ms - 1881

GET /node_modules/bootstrap/dist/css/bootstrap.min.css 200 2.599 ms - 121457

GET /site.css 200 2.650 ms - 1277

GET /node_modules/vue/dist/vue.min.js 200 3.138 ms - 77475

GET /app.js 200 2.496 ms - 1293

GET /node_modules/vue-resource/dist/vue-resource.min.js 200 0.930 ms - 9193

GET /api/events 200 2.267 ms - 215

GET /fonts/geomanist/hinted-Geomanist-Book.woff2 200 1.427 ms - 23504

GET /node_modules/bootstrap/dist/fonts/glyphicons-halflings-regular.woff2 200 1.639 ms - 18028

GET /favicon.ico 404 1.061 ms - 150



Conclusion
At this point, you’ve successfully built an image, performed a simple containerization of an application, and confirmed that your app runs successfully in its container. The next step will be to share your images on Docker Hub, so they can be easily downloaded and run on any destination machine.